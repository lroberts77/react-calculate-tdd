{"version":3,"sources":["components/Display/Display.js","components/Key/Key.js","components/Keypad/Keypad.js","components/Calculator/Calculator.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Display","displayValue","className","Key","keyAction","keyType","keyValue","onClick","Keypad","callOperator","numbers","operators","setOperator","updateDisplay","numberKeys","map","number","key","operatorKeys","operator","Calculator","state","selectedOperator","storedValue","updateStoredValue","toString","setState","console","log","value","includes","substr","length","render","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f364d6e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Display.scss';\n\nconst Display = ({ displayValue }) => (\n<div className=\"display-container\">\n  <p className=\"display-value\">\n    {displayValue}\n  </p>\n</div>\n);\n\nDisplay.propTypes = { displayValue: PropTypes.string.isRequired };\n\nexport default Display;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Key.scss';\n\nconst Key = ({ keyAction, keyType, keyValue }) => (\n  <div \n    className={`key-container ${keyType}`}\n    onClick={() => keyAction(keyValue)}\n  >\n    <p className=\"key-value\">\n      {keyValue}\n    </p>\n  </div>\n);\n\nKey.propTypes = {\n  keyAction: PropTypes.func.isRequired,\n  keyType: PropTypes.string.isRequired,\n  keyValue: PropTypes.string.isRequired,\n}\n\nexport default Key;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Key from '../Key/Key';\nimport './Keypad.scss'\n\nconst Keypad = ({\n  callOperator,\n  numbers,\n  operators,\n  setOperator,\n  updateDisplay,\n}) => {\n  const numberKeys = numbers.map(number => (\n    <Key\n    key = {number}\n    keyAction = {updateDisplay}\n    keyType = \"number-key\"\n    keyValue = {number}\n  />)\n  );\n\n  const operatorKeys = operators.map(operator => (\n    <Key\n      key={operator}\n      keyAction={setOperator}\n      keyType=\"operator-key\"\n      keyValue={operator}\n    />)\n  );\n\n  return (\n    <div className=\"keypad-container\">\n      <div className=\"numbers-container\">\n        {numberKeys}\n      </div>\n      <div className=\"operators-container\">\n        {operatorKeys}\n      </div>\n      <div className=\"submit-container\">\n      <Key\n        keyAction={callOperator}\n        keyType=\"submit-key\"\n        keyValue=\"=\"\n      />\n      </div>\n    </div>\n  );\n}\n\nKeypad.propTypes = {\n  callOperator: PropTypes.func.isRequired,\n  numbers: PropTypes.array.isRequired,\n  operators: PropTypes.array.isRequired,\n  setOperator: PropTypes.func.isRequired,\n  updateDisplay: PropTypes.func.isRequired,\n};\n\nexport default Keypad;\n\n","import React, { Component } from 'react';\nimport Display from '../Display/Display';\nimport Keypad from '../Keypad/Keypad';\nimport './Calculator.scss';\n\nclass Calculator extends Component {\n  state = {\n    // value to be displayed in <Display />\n    displayValue: '0',\n    // values to be displayed in number <Keys />\n    numbers: ['9', '8', '7', '6', '5', '4', '3', '2', '1', '.', '0','ce'],\n    // values to be displayed in operator <Keys />\n    operators: ['/', 'x', '-', '+'],\n    // operator selected for math operation\n    selectedOperator: '',\n    // stored value to use for math operation\n    storedValue: '',\n  }\n \n  callOperator = () => {\n\n    let { displayValue, selectedOperator, storedValue } = this.state;\n\n    //temp variable for updating state storedValue\n    const updateStoredValue = displayValue;\n\n    //parse strings for operations\n    displayValue = (displayValue) * 1;\n    storedValue = (storedValue) * 1;\n\n    //performs selected operation\n    switch (selectedOperator) {\n      case '+':\n        displayValue = storedValue + displayValue;\n        break;\n        case '-':\n          displayValue = storedValue - displayValue;\n          break;\n          case 'x':\n            displayValue = storedValue * displayValue;\n            break;\n            case '/':\n              displayValue = storedValue / displayValue;\n              break;\n              default:\n                //set displayValue to zero if no case matches\n                displayValue = '0';\n    }\n\n    \n    //converts displayValue into a string\n    displayValue = displayValue.toString();\n\n    //reset selectedOperator\n    selectedOperator = '';\n\n    //check for 'NAN' or 'infinity' if true displayValue = '0'\n    if (displayValue === 'NaN' || displayValue === 'Infinity') displayValue = '0'\n\n    this.setState({ displayValue, selectedOperator, storedValue, updateStoredValue });\n\n    console.log(this.state.displayValue);\n\n\n  }\n\n  setOperator = value => {\n\n    let { displayValue, selectedOperator, storedValue } = this.state;\n\n    //check if a value is already present for selectedOperator\n    if (selectedOperator === '') {\n\n      //update storedValue to the value of displayValue\n      storedValue = displayValue;\n\n      //reset the value of displayValue to '0'\n      displayValue = '0';\n\n      //update the value of selectedOperator to the given value\n      selectedOperator = value;\n    } else {\n\n      //if selectedOperator is not an empty string\n      //update the value of selectedOperator to the given value\n      selectedOperator = value;\n    }\n    this.setState({ displayValue, selectedOperator, storedValue });\n\n    console.log('setOperator');\n  }\n\n  updateDisplay = value => {\n\n    let { displayValue } = this.state;\n\n    //prevent multiple instances of '.'\n    if (value === '.' && displayValue.includes('.')) value = '';\n\n    if(value === 'ce') {\n      //deletes last char in displayValue\n      displayValue = displayValue.substr(0, displayValue.length -1);\n\n      //set displayValue to '0' if displayValue is empty string\n      if (displayValue === '') displayValue = '0';\n    } else {\n\n      //replace displayValue with value if displayValue equal to '0'\n      //esle concatenate displayValue and value\n      displayValue === '0' ? displayValue = value : displayValue += value;\n    }\n    this.setState({ displayValue });\n\n    console.log(this.state.displayValue);\n    \n  }\n  \n\n  render = () => {\n    // unpack the component state by using Object Destructuring\n    const {displayValue, numbers, operators} = this.state;\n\n    return (\n      <div className=\"calculator-container\" >\n      <Display displayValue={displayValue} />\n      <Keypad\n        callOperator={this.callOperator}\n        numbers={numbers}\n        operators={operators}\n        setOperator={this.setOperator}\n        updateDisplay={this.updateDisplay}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default Calculator;\n","import React from 'react';\nimport Calculator from '../Calculator/Calculator';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"app-container\">\n    <Calculator />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nimport './index.scss';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}